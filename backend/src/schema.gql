# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddStockToWatchlistInput {
  ticker: String!
  watchlistId: String!
}

type AlertRule {
  createdAt: DateTime!
  id: ID!
  ruleType: String!
  targetValue: Float!
  ticker: String!
}

type AuthPayload {
  accessToken: String!
  user: User!
}

input BuyStockInput {
  price: Float!
  shares: Float!
  ticker: String!
}

type BuyStockPayload {
  portfolio: Portfolio!
  transaction: Transaction!
}

input CreateAlertRuleInput {
  ruleType: String!
  targetValue: Float!
  ticker: String!
}

input CreateWatchlistInput {
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Dividend {
  amount: Float!
  exDate: DateTime!
  frequency: DividendFrequency!
  payDate: DateTime!
  ticker: String!
}

enum DividendFrequency {
  ANNUAL
  QUARTERLY
}

type ForecastModel {
  confidenceScore: Float!
  id: String!
  modelType: String!
  prediction: Float!
  ticker: String!
  trainedAt: DateTime!
}

type Hello {
  message: String!
}

enum Interval {
  _1d
  _1h
  _1m
  _5m
}

input LoginInput {
  email: String!
  password: String!
}

type MarketData {
  afterHours: Float
  close: Float!
  high: Float!
  id: ID!
  interval: Interval!
  low: Float!
  open: Float!
  ticker: String!
  timestamp: String!
  volume: String!
}

type Mutation {
  addStockToWatchlist(input: AddStockToWatchlistInput!): Boolean!
  buyStock(input: BuyStockInput!): BuyStockPayload!
  cancelOrder(orderId: String!): Order!
  createAlertRule(input: CreateAlertRuleInput!): AlertRule!
  createWatchlist(input: CreateWatchlistInput!): Watchlist!
  deduct(amount: Float!): Boolean!
  deleteAlertRule(id: ID!): Boolean!
  deposit(amount: Float!): Boolean!
  login(input: LoginInput!): AuthPayload!
  placeOrder(input: PlaceOrderInput!): Order!
  removeStockFromWatchlist(input: AddStockToWatchlistInput!): Boolean!
  sellStock(input: SellStockInput!): SellStockPayload!
  signUp(input: SignUpInput!): AuthPayload!
}

type News {
  headline: String!
  id: String!
  publishedAt: DateTime!
  sentimentScore: Float
  source: String
  summary: String
  ticker: String!
  type: String
  url: String
}

type Order {
  createdAt: DateTime!
  id: ID!
  matchedAt: DateTime
  price: Float!
  quantity: Float!
  side: OrderSide!
  status: OrderStatus!
  ticker: String!
  timeInForce: TimeInForce!
  type: OrderType!
}

type OrderBook {
  buyOrders: [Order!]!
  sellOrders: [Order!]!
}

enum OrderSide {
  BUY
  SELL
}

enum OrderStatus {
  CANCELLED
  FILLED
  OPEN
  PARTIAL
}

enum OrderType {
  LIMIT
  MARKET
}

input PlaceOrderInput {
  price: Float!
  quantity: Float!
  side: OrderSide!
  ticker: String!
  timeInForce: TimeInForce! = GTC
  type: OrderType! = LIMIT
}

type Portfolio {
  averagePrice: Float!
  quantity: Float!
  ticker: String!
}

type Query {
  getBalance(userId: String!): Float!
  getMyAlertRules: [AlertRule!]!
  getMyBalance: Float!
  getPortfolioSummary: String!
  getPositionPnL(ticker: String!): String!
  getTotalPnL: String!
  me: User!
  myOrders: [Order!]!
  myPortfolio: [Portfolio!]!
  myTransactions: [Transaction!]!
  myWatchlists: [Watchlist!]!
  orderBook(ticker: String!): OrderBook!
  sayHello: Hello!
  stock(ticker: String!): Stock
  stocks: [Stock!]!
}

input SellStockInput {
  price: Float!
  shares: Float!
  ticker: String!
}

type SellStockPayload {
  portfolio: Portfolio!
  transaction: Transaction!
}

input SignUpInput {
  email: String!
  password: String!
}

type Stock {
  companyName: String!
  country: String
  currency: String
  dividends(limit: Float! = 12): [Dividend!]!
  exchange: String!
  forecastModels: [ForecastModel!]!
  industry: String
  insiderHolding: Float
  institutionalHolding: Float
  ipoDate: String
  marketCap: String
  marketData(interval: Interval! = _1d): [MarketData!]!
  news(limit: Float! = 20): [News!]!
  outstandingShares: String
  sector: String
  status: String
  ticker: String!
}

enum TimeInForce {
  FOK
  GTC
  IOC
}

type Transaction {
  action: TransactionAction!
  id: ID!
  price: Float!
  shares: Float!
  ticker: String!
  timestamp: DateTime!
}

enum TransactionAction {
  BUY
  SELL
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
}

type Watchlist {
  createdAt: DateTime!
  id: ID!
  name: String!
  stocks: [Stock!]!
}