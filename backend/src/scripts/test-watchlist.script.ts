import { login, gqlRequest } from './test-utils';

async function main() {
  try {
    console.log('üîê Logging in...');
    const token = await login('demo@example.com', 'password123');
    console.log('‚úÖ Login successful');

    // 1. T·∫°o watchlist m·ªõi
    console.log('üìã Creating watchlist...');
    const { createWatchlist } = await gqlRequest(
      `
      mutation CreateWatchlist($input: CreateWatchlistInput!) {
        createWatchlist(input: $input) {
          id
          name
        }
      }
      `,
      { input: { name: 'Tech Stocks' } },
      token,
    );
    const watchlistId = createWatchlist.id;
    console.log(`‚úÖ Created watchlist: ${watchlistId}`);

    // 2. Th√™m c·ªï phi·∫øu v√†o watchlist
    console.log('‚ûï Adding stocks to watchlist...');
    const stocksToAdd = ['AAPL', 'GOOG'];
    for (const ticker of stocksToAdd) {
      await gqlRequest(
        `
        mutation AddStockToWatchlist($input: AddStockToWatchlistInput!) {
          addStockToWatchlist(input: $input)
        }
        `,
        { input: { watchlistId, ticker } },
        token,
      );
      console.log(`‚úÖ Added ${ticker} to watchlist`);
    }

    // 3. Xem l·∫°i to√†n b·ªô watchlist hi·ªán t·∫°i
    console.log('üîé Querying all watchlists...');
    const { myWatchlists } = await gqlRequest(
      `
      query {
        myWatchlists {
          id
          name
          stocks {
            ticker
            companyName
          }
        }
      }
      `,
      {},
      token,
    );
    console.log('üìã Watchlists:');
    console.dir(myWatchlists, { depth: null });

    // 4. X√≥a 1 c·ªï phi·∫øu
    console.log('‚ùå Removing stock from watchlist...');
    await gqlRequest(
      `
      mutation RemoveStockFromWatchlist($input: AddStockToWatchlistInput!) {
        removeStockFromWatchlist(input: $input)
      }
      `,
      { input: { watchlistId, ticker: 'AAPL' } },
      token,
    );
    console.log('‚úÖ Removed AAPL');

    // 5. X√°c minh l·∫°i sau khi x√≥a
    console.log('üîé Verifying stock removed...');
    const { myWatchlists: finalWatchlists } = await gqlRequest(
      `
      query {
        myWatchlists {
          id
          name
          stocks {
            ticker
            companyName
          }
        }
      }
      `,
      {},
      token,
    );
    console.log('üìã Final watchlists:');
    console.dir(finalWatchlists, { depth: null });

    console.log('‚úÖ Watchlist test completed successfully!');
  } catch (error) {
    console.error('‚ùå Error in watchlist test:', error);
    throw error;
  }
}

main().catch(console.error);
