# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddStockToWatchlistInput {
  ticker: String!
  watchlistId: String!
}

type AlertRule {
  createdAt: DateTime!
  id: ID!
  ruleType: AlertRuleType!
  targetValue: Float!
  ticker: String!
}

"""The type of alert rule"""
enum AlertRuleType {
  PERCENT_CHANGE
  PRICE_ABOVE
  PRICE_BELOW
  VOLUME_SPIKE
}

type AuthPayload {
  accessToken: String!
  user: User!
}

input BuyStockInput {
  price: Float!
  shares: Float!
  ticker: String!
}

type BuyStockPayload {
  portfolio: Portfolio!
  transaction: Transaction!
}

input CreateAlertRuleInput {
  ruleType: AlertRuleType!
  targetValue: Float!
  ticker: String!
}

input CreateWatchlistInput {
  name: String!
}

type DashboardResult {
  cashBalance: Float!
  stockPositions: [StockPosition!]!
  totalPnL: Float!
  totalPortfolioValue: Float!
  totalRealizedPnL: Float!
  totalUnrealizedPnL: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Dividend {
  amount: Float!
  exDate: DateTime!
  frequency: DividendFrequency!
  payDate: DateTime!
  ticker: String!
}

enum DividendFrequency {
  ANNUAL
  QUARTERLY
}

type ForecastModel {
  confidenceScore: Float!
  id: String!
  modelType: String!
  prediction: Float!
  ticker: String!
  trainedAt: DateTime!
}

type Hello {
  message: String!
}

enum Interval {
  _1d
  _1h
  _1m
  _5m
}

input LoginInput {
  email: String!
  password: String!
}

type MarketData {
  afterHours: Float
  close: Float!
  high: Float!
  id: ID!
  interval: Interval!
  low: Float!
  open: Float!
  ticker: String!
  timestamp: String!
  volume: String!
}

type Mutation {
  addStockToWatchlist(input: AddStockToWatchlistInput!): Boolean!
  banUser(userId: String!): User!
  buyStock(input: BuyStockInput!): BuyStockPayload!
  cancelOrder(orderId: String!): Order!
  changePassword(currentPassword: String!, newPassword: String!): Boolean!
  createAlertRule(input: CreateAlertRuleInput!): AlertRule!
  createWatchlist(input: CreateWatchlistInput!): Watchlist!
  deduct(amount: Float!): Boolean!
  deleteAlertRule(id: ID!): Boolean!
  demoteFromAdmin(userId: String!): User!
  deposit(amount: Float!): Boolean!
  login(input: LoginInput!): AuthPayload!
  placeOrder(input: PlaceOrderInput!): Order!
  placeStopOrder(input: PlaceStopOrderInput!): Order!
  promoteToAdmin(userId: String!): User!
  removeStockFromWatchlist(input: AddStockToWatchlistInput!): Boolean!
  sellStock(input: SellStockInput!): SellStockPayload!
  signUp(input: SignUpInput!): AuthPayload!
  unbanUser(userId: String!): User!
  updateAvatar(avatarUrl: String!): User!
  updateRiskConfig(input: UpdateRiskConfigInput!): RiskConfig!
}

type News {
  headline: String!
  id: String!
  publishedAt: DateTime!
  sentimentScore: Float
  source: String
  summary: String
  ticker: String!
  type: String
  url: String
}

type Order {
  createdAt: DateTime!
  id: ID!
  matchedAt: DateTime
  price: Float!
  quantity: Float!
  side: OrderSide!
  status: OrderStatus!
  ticker: String!
  timeInForce: TimeInForce!
  type: OrderType!
}

type OrderBook {
  buyOrders: [Order!]!
  sellOrders: [Order!]!
}

enum OrderSide {
  BUY
  SELL
}

enum OrderStatus {
  CANCELLED
  FILLED
  OPEN
  PARTIAL
}

"""The type of order"""
enum OrderType {
  LIMIT
  MARKET
  STOP_LIMIT
  STOP_MARKET
}

input PlaceOrderInput {
  price: Float!
  quantity: Float!
  side: OrderSide!
  ticker: String!
  timeInForce: TimeInForce! = GTC
  type: OrderType! = LIMIT
}

input PlaceStopOrderInput {
  price: Float!
  quantity: Float!
  side: OrderSide!
  ticker: String!
  timeInForce: TimeInForce! = GTC
  triggerPrice: Float!
  type: OrderType!
}

type Portfolio {
  averagePrice: Float!
  quantity: Float!
  ticker: String!
}

type PositionValidation {
  isValid: Boolean!
  maxQuantity: Float
  message: String
}

type Query {
  calculateRecommendedStopLoss(entryPrice: Float!, side: String!, ticker: String!): Float!
  getAllUsers: [User!]!
  getBalance(userId: String!): Float!
  getBollingerBands(interval: Interval! = _1d, period: Float! = 20, stdDev: Float! = 2, ticker: String!): [Float!]!
  getDashboard: DashboardResult!
  getEMA(interval: Interval! = _1d, period: Float! = 20, ticker: String!): [Float!]!
  getMyAlertRules: [AlertRule!]!
  getMyBalance: Float!
  getPortfolioSummary: String!
  getPositionPnL(ticker: String!): String!
  getRSI(interval: Interval! = _1d, period: Float! = 14, ticker: String!): [Float!]!
  getRiskConfig: RiskConfig!
  getRiskReport: RiskReport!
  getSMA(interval: Interval! = _1d, period: Float! = 20, ticker: String!): [Float!]!
  getStockPosition(ticker: String!): StockPosition
  getTotalPnL: String!
  getUserById(userId: String!): User!
  me: User!
  myOrders: [Order!]!
  myPortfolio: [Portfolio!]!
  myTransactions: [Transaction!]!
  myWatchlists: [Watchlist!]!
  orderBook(ticker: String!): OrderBook!
  sayHello: Hello!
  stock(ticker: String!): Stock
  stocks: [Stock!]!
  validatePortfolioRisk: RiskValidation!
  validatePositionSize(price: Float!, quantity: Float!, ticker: String!): PositionValidation!
  validateRiskPerTrade(price: Float!, quantity: Float!, stopLossPrice: Float, ticker: String!): RiskValidation!
}

type RiskConfig {
  maxLeverage: Float!
  maxPortfolioRisk: Float!
  maxPositionSizePercent: Float!
  maxRiskPerTrade: Float!
  stopLossPercent: Float!
}

type RiskReport {
  maxPositionSize: Float!
  portfolioRisk: Float!
  portfolioValue: Float!
  riskConfig: RiskConfig!
}

type RiskValidation {
  currentRisk: Float
  isValid: Boolean!
  message: String
}

input SellStockInput {
  price: Float!
  shares: Float!
  ticker: String!
}

type SellStockPayload {
  portfolio: Portfolio!
  transaction: Transaction!
}

input SignUpInput {
  email: String!
  password: String!
}

type Stock {
  avatar: String
  companyName: String!
  country: String
  currency: String
  dividends(limit: Float! = 12): [Dividend!]!
  exchange: String!
  forecastModels: [ForecastModel!]!
  industry: String
  insiderHolding: Float
  institutionalHolding: Float
  ipoDate: String
  marketCap: String
  marketData(interval: Interval! = _1d): [MarketData!]!
  news(limit: Float! = 20): [News!]!
  outstandingShares: String
  sector: String
  status: String
  ticker: String!
}

type StockPosition {
  avatar: String
  averageBuyPrice: Float!
  companyName: String!
  currentPrice: Float!
  marketValue: Float!
  quantity: Float!
  ticker: String!
  unrealizedPnL: Float!
  unrealizedPnLPercent: Float!
}

enum TimeInForce {
  FOK
  GTC
  IOC
}

type Transaction {
  action: TransactionAction!
  id: ID!
  price: Float!
  shares: Float!
  ticker: String!
  timestamp: DateTime!
}

enum TransactionAction {
  BUY
  SELL
}

input UpdateRiskConfigInput {
  maxLeverage: Float
  maxPortfolioRisk: Float
  maxPositionSizePercent: Float
  maxRiskPerTrade: Float
  stopLossPercent: Float
}

type User {
  avatar: String
  createdAt: DateTime!
  email: String!
  id: ID!
  isBanned: Boolean!
  passwordHash: String!
  role: String!
}

type Watchlist {
  createdAt: DateTime!
  id: ID!
  name: String!
  stocks: [Stock!]!
}